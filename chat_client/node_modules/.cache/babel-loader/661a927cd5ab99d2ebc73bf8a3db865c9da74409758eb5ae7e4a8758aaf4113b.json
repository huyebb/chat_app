{"ast":null,"code":"var _jsxFileName = \"E:\\\\Chat-App-Realtime\\\\chat_client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [points, setPoints] = useState();\n  const [currentPoint, setCurrentPoint] = useState(1);\n  const [gameOver, setGameOver] = useState(false);\n  const [allCleared, setAllCleared] = useState(false);\n  const [elapsedTime, setElapsedTime] = useState('0.0s');\n  const [buttonText, setButtonText] = useState('Play');\n  const [circles, setCircles] = useState([]);\n  const timerRef = useRef(null);\n  const startTimeRef = useRef(null);\n  useEffect(() => {\n    return () => {\n      clearInterval(timerRef.current);\n    };\n  }, []);\n  const startGame = () => {\n    resetGame();\n    if (points <= 0) return;\n    setButtonText('Restart');\n    generateCircles(points);\n    setGameOver(false);\n    setAllCleared(false);\n    startTimeRef.current = Date.now();\n    timerRef.current = setInterval(() => {\n      const elapsed = ((Date.now() - startTimeRef.current) / 1000).toFixed(1);\n      setElapsedTime(`${elapsed}s`);\n    }, 100);\n  };\n  const generateCircles = points => {\n    const newCircles = [];\n    const gameAreaWidth = 480;\n    const gameAreaHeight = 500;\n    for (let i = 1; i <= points; i++) {\n      const randomX = Math.random() * (gameAreaWidth - 50);\n      const randomY = Math.random() * (gameAreaHeight - 50);\n      newCircles.push({\n        number: i,\n        x: randomX,\n        y: randomY,\n        color: 'white',\n        opacity: 1\n      });\n    }\n    setCircles(newCircles);\n  };\n  const checkClick = number => {\n    if (gameOver || allCleared) return;\n    setCircles(prevCircles => {\n      const updatedCircles = prevCircles.map(circle => {\n        if (circle.number === number) {\n          if (number === currentPoint) {\n            if (currentPoint === points) {\n              setAllCleared(true);\n              setGameOver(true);\n              clearInterval(timerRef.current);\n            } else {\n              setCurrentPoint(prev => prev + 1);\n            }\n            return {\n              ...circle,\n              color: 'red',\n              opacity: 0\n            };\n          } else {\n            setGameOver(true);\n            clearInterval(timerRef.current);\n          }\n        }\n        return circle;\n      });\n      return updatedCircles;\n    });\n  };\n  const resetGame = () => {\n    clearInterval(timerRef.current);\n    setButtonText('Play');\n    setElapsedTime('0.0s');\n    setGameOver(false);\n    setAllCleared(false);\n    setCurrentPoint(1);\n    setCircles([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"gameStatus\",\n        style: {\n          color: gameOver ? allCleared ? 'green' : 'red' : 'black'\n        },\n        children: allCleared ? 'ALL CLEARED' : gameOver ? 'GAME OVER' : \"LET'S PLAY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"pointsInput\",\n          children: \"Points:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"pointsInput\",\n          min: \"1\",\n          value: points,\n          onChange: e => setPoints(parseInt(e.target.value, 10))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time-display\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          id: \"timeLabel\",\n          children: elapsedTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startGame,\n        children: buttonText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-area\",\n      children: circles.map(circle => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"circle\",\n        style: {\n          left: `${circle.x}px`,\n          top: `${circle.y}px`,\n          backgroundColor: circle.color,\n          opacity: circle.opacity,\n          position: 'absolute'\n        },\n        onClick: () => checkClick(circle.number),\n        children: circle.number\n      }, circle.number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3/NTrE94WT2tLlKcBfQtrtJu9CM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","App","_s","points","setPoints","currentPoint","setCurrentPoint","gameOver","setGameOver","allCleared","setAllCleared","elapsedTime","setElapsedTime","buttonText","setButtonText","circles","setCircles","timerRef","startTimeRef","clearInterval","current","startGame","resetGame","generateCircles","Date","now","setInterval","elapsed","toFixed","newCircles","gameAreaWidth","gameAreaHeight","i","randomX","Math","random","randomY","push","number","x","y","color","opacity","checkClick","prevCircles","updatedCircles","map","circle","prev","className","children","id","style","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","min","value","onChange","e","parseInt","target","onClick","left","top","backgroundColor","position","_c","$RefreshReg$"],"sources":["E:/Chat-App-Realtime/chat_client/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [points, setPoints] = useState();\n  const [currentPoint, setCurrentPoint] = useState(1);\n  const [gameOver, setGameOver] = useState(false);\n  const [allCleared, setAllCleared] = useState(false);\n  const [elapsedTime, setElapsedTime] = useState('0.0s');\n  const [buttonText, setButtonText] = useState('Play');\n  const [circles, setCircles] = useState([]);\n\n  const timerRef = useRef(null);\n  const startTimeRef = useRef(null);\n\n  useEffect(() => {\n    return () => {\n      clearInterval(timerRef.current);\n    };\n  }, []);\n\n  const startGame = () => {\n    resetGame();\n    if (points <= 0) return;\n    setButtonText('Restart');\n    generateCircles(points);\n    setGameOver(false);\n    setAllCleared(false);\n\n    startTimeRef.current = Date.now();\n    timerRef.current = setInterval(() => {\n      const elapsed = ((Date.now() - startTimeRef.current) / 1000).toFixed(1);\n      setElapsedTime(`${elapsed}s`);\n    }, 100);\n  };\n\n  const generateCircles = (points) => {\n    const newCircles = [];\n    const gameAreaWidth = 480;\n    const gameAreaHeight = 500; \n\n    for (let i = 1; i <= points; i++) {\n      const randomX = Math.random() * (gameAreaWidth - 50);\n      const randomY = Math.random() * (gameAreaHeight - 50);\n      newCircles.push({\n        number: i,\n        x: randomX,\n        y: randomY,\n        color: 'white', \n        opacity: 1, \n      });\n    }\n\n    setCircles(newCircles);\n  };\n\n  const checkClick = (number) => {\n    if (gameOver || allCleared) return;\n\n    setCircles((prevCircles) => {\n      const updatedCircles = prevCircles.map((circle) => {\n        if (circle.number === number) {\n          if (number === currentPoint) {\n            if (currentPoint === points) {\n              setAllCleared(true);\n              setGameOver(true);\n              clearInterval(timerRef.current);\n            } else {\n              setCurrentPoint((prev) => prev + 1);\n            }\n            return {\n              ...circle,\n              color: 'red',\n              opacity: 0,\n            };\n          } else {\n            setGameOver(true);\n            clearInterval(timerRef.current);\n          }\n        }\n        return circle;\n      });\n      return updatedCircles;\n    });\n  };\n\n  const resetGame = () => {\n    clearInterval(timerRef.current);\n    setButtonText('Play');\n    setElapsedTime('0.0s');\n    setGameOver(false);\n    setAllCleared(false);\n    setCurrentPoint(1);\n    setCircles([]);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <h2\n          id=\"gameStatus\"\n          style={{ color: gameOver ? (allCleared ? 'green' : 'red') : 'black' }}\n        >\n          {allCleared ? 'ALL CLEARED' : gameOver ? 'GAME OVER' : \"LET'S PLAY\"}\n        </h2>\n      </div>\n      <div className=\"settings\">\n        <div className=\"input-group\">\n          <label htmlFor=\"pointsInput\">Points:</label>\n          <input\n            type=\"number\"\n            id=\"pointsInput\"\n            min=\"1\"\n            value={points}\n            onChange={(e) => setPoints(parseInt(e.target.value, 10))}\n          />\n        </div>\n        <div className=\"time-display\">\n          <label>Time:</label>\n          <label id=\"timeLabel\">{elapsedTime}</label>\n        </div>\n        <button onClick={startGame}>{buttonText}</button>\n      </div>\n      <div className=\"game-area\">\n        {circles.map((circle) => (\n          <div\n            key={circle.number}\n            className=\"circle\"\n            style={{\n              left: `${circle.x}px`,\n              top: `${circle.y}px`,\n              backgroundColor: circle.color,\n              opacity: circle.opacity,\n              position: 'absolute',\n            }}\n            onClick={() => checkClick(circle.number)}\n          >\n            {circle.number}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}